#version 330 core

in vec2 texCoord;

uniform bool initialize;
uniform bool heat;
uniform sampler2D texture1;
uniform float kernel[9];
uniform vec2 tex_offset[9]; // precomputed offsets
uniform float stepHeight;
uniform float stepWidth;

out vec4 FragColor;

bool isValidCoords(vec2 coords)
{
	return 0 < coords.x && coords.x < 1 && 0 < coords.y && coords.y < 1;
}

bool isValidCoords2(vec2 v)
{
	return v.y > 2.f*stepHeight && stepWidth < v.x && v.x < (1 - stepWidth);
}

vec4 convolute()
{
	vec3 result;
	if(isValidCoords2(texCoord))
	{
		result = vec3(0.0, 0.0, 0.0);
		for (int i = 0; i < 9; i++)
		{
			vec2 coords = texCoord + tex_offset[i];
			vec3 texColor = (isValidCoords(coords)) ? texture(texture1, texCoord + tex_offset[i]).rgb : vec3(1,1,1);
			result += texColor * kernel[i];
		}

		//float mod = dot(result, result) / 3.f;
		//return (mod > 0.5f) ? vec4(1,1,1, 1.0) : vec4(0,0,0,1);
	}
	else
	{
		result = vec3(1,1,1);
	}

	return vec4(result.xyz,1);
}


void main()
{
	if (heat)
	{
		if (0.1 <= texCoord.y && texCoord.y <= 0.3)
		{
			FragColor = vec4(1,1,1,1);
		}
	}
	else
	{
		FragColor = (initialize) ? texture(texture1, texCoord) : convolute();
		//FragColor = texture(texture1, texCoord);
	}
}