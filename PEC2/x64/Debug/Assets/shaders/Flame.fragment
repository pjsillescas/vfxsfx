#version 330 core

in vec2 texCoord; // original texture coordinates
in vec2 texFragment; // coordinates for the refraction texture
in vec4 clipSpace;

uniform float time;
uniform float flowTime;
uniform vec2 iResolution;
uniform sampler2D maskTexture;
uniform sampler2D refractionTexture; // refraction Texture;
uniform sampler2D distortionTexture; // for Map distortion

uniform vec4 backgroundTint = vec4(0,0,0,1);
const float waveForce = 0.004;
const vec4 fireColor = vec4(0.87f,0.46f,0,1.f); // orange


// Output color
out vec4 FragColor;
out vec4 out_color;

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
    return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
{
    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

    // First corner
    vec3 i  = floor(v + dot(v, C.yyy) );
    vec3 x0 =   v - i + dot(i, C.xxx) ;

    // Other corners
    vec3 g = step(x0.yzx, x0.xyz);
    vec3 l = 1.0 - g;
    vec3 i1 = min( g.xyz, l.zxy );
    vec3 i2 = max( g.xyz, l.zxy );

    //   x0 = x0 - 0.0 + 0.0 * C.xxx;
    //   x1 = x0 - i1  + 1.0 * C.xxx;
    //   x2 = x0 - i2  + 2.0 * C.xxx;
    //   x3 = x0 - 1.0 + 3.0 * C.xxx;
    vec3 x1 = x0 - i1 + C.xxx;
    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

    // Permutations
    i = mod289(i); 
    vec4 p = permute( permute( permute( 
            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
            + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
    float n_ = 0.142857142857; // 1.0/7.0
    vec3  ns = n_ * D.wyz - D.xzx;

    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

    vec4 x_ = floor(j * ns.z);
    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

    vec4 x = x_ *ns.x + ns.yyyy;
    vec4 y = y_ *ns.x + ns.yyyy;
    vec4 h = 1.0 - abs(x) - abs(y);

    vec4 b0 = vec4( x.xy, y.xy );
    vec4 b1 = vec4( x.zw, y.zw );

    vec4 s0 = floor(b0)*2.0 + 1.0;
    vec4 s1 = floor(b1)*2.0 + 1.0;
    vec4 sh = -step(h, vec4(0.0));

    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

    vec3 p0 = vec3(a0.xy,h.x);
    vec3 p1 = vec3(a0.zw,h.y);
    vec3 p2 = vec3(a1.xy,h.z);
    vec3 p3 = vec3(a1.zw,h.w);

    //Normalise gradients
    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
    p0 *= norm.x;
    p1 *= norm.y;
    p2 *= norm.z;
    p3 *= norm.w;

    // Mix final noise value
    vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
    m = m * m;
    return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
        dot(p2,x2), dot(p3,x3) ) );
}

// demo code:
float color(vec2 xy)
{
    return 0.7 * snoise(vec3(xy, 0.3*time));
}

vec4 getPixel(vec2 fragCoord)
{
    vec2 p = (fragCoord.xy/iResolution.y) * 2.0 - 1.0;

    vec3 xyz = vec3(p, 0);

    vec2 step = vec2(1.3, 1.7);
    float n = color(xyz.xy);
    n += 0.5 * color(xyz.xy * 2.0 - step);
    n += 0.25 * color(xyz.xy * 4.0 - 2.0 * step);
    n += 0.125 * color(xyz.xy * 8.0 - 3.0 * step);
    n += 0.0625 * color(xyz.xy * 16.0 - 4.0 * step);
    n += 0.03125 * color(xyz.xy * 32.0 - 5.0 * step);
    
    vec3 perlin = vec3(0.5 + 0.5 * vec3(n, n, n));

    //return vec4(perlin.xy,0.f, 1.f);
    return vec4(perlin.xyz,1.f);
}

float getAbsorptionFactor()
{
    const float dampeningDistance = 1.2;
    const float alpha = 2 * 2.3 /dampeningDistance; // log(10) = 2.3, absorption(dampeningDistance) = 0.01
    
    vec2 absCoords = texCoord.xy - vec2(0.5f, 0.5f);
    return exp(- alpha * dot(absCoords, absCoords));
}

vec4 getRefractColor(bool useDistortion)
{
	float absorption = getAbsorptionFactor();
    // Take R and G color form texture as vectors coordinate to distord
	// Change code to a best distorsion calculation
	vec2 distortedTexCoords = texture(distortionTexture,vec2(texFragment.x + time, texFragment.y)).rg * 0.1;
	distortedTexCoords = texFragment + vec2(distortedTexCoords.x, distortedTexCoords.y + flowTime);
	vec2 totalDistortion = (texture(distortionTexture,distortedTexCoords).rg * 2.0 - 1.0) * waveForce * absorption;
	
	vec2 normalClip = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 refractCoors = clamp ((useDistortion) ? normalClip + totalDistortion : normalClip, 0.001, 0.999);
	return texture(refractionTexture, refractCoors);
}

vec4 getBackground(vec4 refractColor)
{
    // With A Little Bit of Bluesky
	//out_color = mix(refractColor,vec4(0.9,0.9,0.9,1),0.7);
    float absorptionFactor = 1 - clamp(getAbsorptionFactor(), 0.01,0.99);
    vec4 tint = mix(backgroundTint, vec4(1,1,1,1), absorptionFactor);
    //return (absorptionFactor < 0.9) ? mix(refractColor,tint,0.4) : refractColor;
	return refractColor * tint;
    //out_color = vec4(1,1,1,1);
}

void main()
{
    vec4 mask = texture(maskTexture, vec2(texCoord.x,1 - texCoord.y));

    bool isBackground = dot(mask, vec4(1,1,1,0)) <= 0.01f;
    vec4 refractColor = getRefractColor(isBackground);
    if(isBackground)
    {
        // Background
        FragColor = getBackground(refractColor);
    }
    else
    {
        // Flame
        float mixValue = 0.8f;
        FragColor = mix(refractColor,getPixel(texCoord) * mask * fireColor, mixValue);
    }
}