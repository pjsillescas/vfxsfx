#version 330 core

in vec2 texFragment;
//in vec3 colorFragment;
in vec4 clipSpace;
in vec3 cameraVector;

out vec4 out_color;

uniform sampler2D texture1; // reflection Texture
uniform sampler2D texture2; // refraction Texture;
uniform sampler2D texture3; // for Map distorsion

uniform float moveDistord; // Time Offset for water move;

const float waveForce = 0.005 	;

void main() {

	vec2 normalClip = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	
	vec2 reflectCoors = vec2(normalClip.x, -normalClip.y); //  Neg beacuse is a reflexion
	vec2 refractCoors = vec2(normalClip.x, normalClip.y);

	// Take R and G color form texture as vectors coordinate to distord
	vec2 distorsion1 = waveForce* (texture(texture3, vec2(texFragment.x + moveDistord, texFragment.y)).rg * 2.0 -1.0);
	vec2 distorsion2 = waveForce* (texture(texture3, vec2(texFragment.x - moveDistord, texFragment.y + moveDistord)).rg * 2.0 -1.0);
	vec2 totalDistorsion = distorsion1 + distorsion2;
	
	refractCoors += totalDistorsion;
	refractCoors = clamp (refractCoors, 0.001, 0.999);
	
	reflectCoors += totalDistorsion;
	reflectCoors.x = clamp (reflectCoors.x, 0.001, 0.999);
	reflectCoors.y = clamp (reflectCoors.y, -0.999, -0.001);
	
	vec4 reflectColor = texture(texture1,reflectCoors);
	vec4 refractColor = texture(texture2,refractCoors);

	// For Fresnel Effect
	vec3 viewVector = normalize(cameraVector);
	float refractFactor = dot (viewVector, vec3(0.0, 1.0, 0.0));
	refractFactor = pow(refractFactor,3.0);
	
	// With A Little Bit of Bluesky
	out_color = mix (reflectColor,refractColor,refractFactor);
	out_color = mix(out_color,vec4(0.0,0.5,0.5,1.0),0.2);

}
