#version 330 core

in vec2 texFragment;
in vec3 colorFragment;
in vec4 clipSpace;
in vec3 cameraVector;

in vec3 lightVector;

out vec4 out_color;

uniform sampler2D texture1; // reflection Texture
uniform sampler2D texture2; // refraction Texture;
uniform sampler2D texture3; // for Map distorsion
uniform sampler2D texture4; // for Normal map light
uniform vec3 lightcolor;

uniform float moveDistord; // Time Offset for water move;
uniform vec3 plane = vec3(0,0,1);

const float waveForce = 0.04;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main() {
	// Take R and G color form texture as vectors coordinate to distord
	// Change code to a best distorsion calculation
	//vec2 distortedTexCoords = texture(texture3,vec2(texFragment.x + moveDistord, texFragment.y)).rg * 0.1;
	vec2 distortedTexCoords = texFragment;
	distortedTexCoords = texFragment + vec2(distortedTexCoords.x, distortedTexCoords.y+moveDistord);
	vec2 totalDistorsion = (texture(texture3,distortedTexCoords).rg * 2.0 - 1.0) * waveForce;
	
	vec2 normalClip = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 refractCoors = clamp (normalClip + totalDistorsion, 0.001, 0.999);
	vec4 refractColor = texture(texture2,refractCoors);

	// For Fresnel Effect
	vec3 viewVector = normalize(cameraVector);
	
	vec3 normal = vec3 (0, 0, 1);
	normal = normalize(normal);
	
	// For Normal Map Light
	vec3 reflectedLight = reflect(normalize(lightVector), normal);
	float specular = max(dot(reflectedLight,viewVector),0.0);
	specular = pow (specular,shineDamper);
	vec3 specularHighLights = lightcolor * specular * reflectivity;
	
	// With A Little Bit of Bluesky
	out_color = mix(refractColor,vec4(0.0,0.4,0.9,0.5),0.2) + vec4 (specularHighLights, 0.0);
}
